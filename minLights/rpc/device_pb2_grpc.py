# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from minLights.rpc import device_pb2 as minknow_dot_rpc_dot_device__pb2


class DeviceServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_device_info = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_device_info',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetDeviceInfoRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetDeviceInfoResponse.FromString,
        )
    self.get_device_state = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_device_state',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetDeviceStateRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetDeviceStateResponse.FromString,
        )
    self.stream_device_state = channel.unary_stream(
        '/ont.rpc.device.DeviceService/stream_device_state',
        request_serializer=minknow_dot_rpc_dot_device__pb2.StreamDeviceStateRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetDeviceStateResponse.FromString,
        )
    self.get_flow_cell_info = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_flow_cell_info',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetFlowCellInfoRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetFlowCellInfoResponse.FromString,
        )
    self.stream_flow_cell_info = channel.unary_stream(
        '/ont.rpc.device.DeviceService/stream_flow_cell_info',
        request_serializer=minknow_dot_rpc_dot_device__pb2.StreamFlowCellInfoRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetFlowCellInfoResponse.FromString,
        )
    self.set_user_specified_flow_cell_id = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_user_specified_flow_cell_id',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedFlowCellIdRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedFlowCellIdResponse.FromString,
        )
    self.set_user_specified_product_code = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_user_specified_product_code',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedProductCodeRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedProductCodeResponse.FromString,
        )
    self.get_channels_layout = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_channels_layout',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetChannelsLayoutRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetChannelsLayoutResponse.FromString,
        )
    self.reset_device_settings = channel.unary_unary(
        '/ont.rpc.device.DeviceService/reset_device_settings',
        request_serializer=minknow_dot_rpc_dot_device__pb2.ResetDeviceSettingsRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.ResetDeviceSettingsResponse.FromString,
        )
    self.set_calibration = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_calibration',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetCalibrationRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetCalibrationResponse.FromString,
        )
    self.clear_calibration = channel.unary_unary(
        '/ont.rpc.device.DeviceService/clear_calibration',
        request_serializer=minknow_dot_rpc_dot_device__pb2.ClearCalibrationRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.ClearCalibrationResponse.FromString,
        )
    self.get_calibration = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_calibration',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetCalibrationRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetCalibrationResponse.FromString,
        )
    self.set_temperature = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_temperature',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetTemperatureRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetTemperatureResponse.FromString,
        )
    self.get_temperature = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_temperature',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetTemperatureRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetTemperatureResponse.FromString,
        )
    self.unblock = channel.unary_unary(
        '/ont.rpc.device.DeviceService/unblock',
        request_serializer=minknow_dot_rpc_dot_device__pb2.UnblockRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.UnblockResponse.FromString,
        )
    self.cancel_unblocks = channel.unary_unary(
        '/ont.rpc.device.DeviceService/cancel_unblocks',
        request_serializer=minknow_dot_rpc_dot_device__pb2.CancelUnblocksRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.CancelUnblocksResponse.FromString,
        )
    self.get_channel_configuration = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_channel_configuration',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetChannelConfigurationRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetChannelConfigurationResponse.FromString,
        )
    self.set_channel_configuration = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_channel_configuration',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationResponse.FromString,
        )
    self.set_channel_configuration_all = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_channel_configuration_all',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationAllRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationAllResponse.FromString,
        )
    self.set_saturation_config = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_saturation_config',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetSaturationConfigRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetSaturationConfigResponse.FromString,
        )
    self.get_saturation_config = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_saturation_config',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetSaturationConfigRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetSaturationConfigResponse.FromString,
        )
    self.get_sample_rate = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_sample_rate',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetSampleRateRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetSampleRateResponse.FromString,
        )
    self.set_sample_rate = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_sample_rate',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetSampleRateRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetSampleRateResponse.FromString,
        )
    self.get_bias_voltage = channel.unary_unary(
        '/ont.rpc.device.DeviceService/get_bias_voltage',
        request_serializer=minknow_dot_rpc_dot_device__pb2.GetBiasVoltageRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.GetBiasVoltageResponse.FromString,
        )
    self.set_bias_voltage = channel.unary_unary(
        '/ont.rpc.device.DeviceService/set_bias_voltage',
        request_serializer=minknow_dot_rpc_dot_device__pb2.SetBiasVoltageRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_device__pb2.SetBiasVoltageResponse.FromString,
        )


class DeviceServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get_device_info(self, request, context):
    """Get information about the device this MinKNOW instance was started for.

    In normal circumstances (ie: when using the manager service), a new MinKNOW instance
    is started for each available device. This call provides information about this device.

    The information returned by this call will not change (providing the MinKNOW instance
    was started by the manager service).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_device_state(self, request, context):
    """Get information about the current device state.

    Information in this call may change as the device is used with MinKNOW, for example,
    by unplugging or plugging in the device.
    Since 1.12
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_device_state(self, request, context):
    """Streaming version of get_device_state

    Since 1.13
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_flow_cell_info(self, request, context):
    """Get information about the flow cell (if any).

    This provides information about the flow_cell attached to the device (described by
    get_device_info()), if any.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_flow_cell_info(self, request, context):
    """Streaming version of get_flow_cell_info

    Since 1.13
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_user_specified_flow_cell_id(self, request, context):
    """Set the user specified flow cell id.

    This changes the user specified flow cell id.
    MinKNOW will use this id in place of the id read from the eeprom, if no eeprom data
    is available.

    This data is reset when the flow cell is disconnected.

    Since 1.12
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_user_specified_product_code(self, request, context):
    """Set the user specified product code.

    This changes the user specified product code.

    MinKNOW does not use the product code, it is intended for use in MinKNOW's clients.

    This data is reset when the flow cell is disconnected.

    Since 1.12
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_channels_layout(self, request, context):
    """Get information about the channel layout

    Since 1.14
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def reset_device_settings(self, request, context):
    """MINKNOW_PUBLIC_EXCLUDE
    Reset all settings associate with the current device.

    This call will initialise all settings to their default state, ie the same as when MinKNOW boots.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_calibration(self, request, context):
    """TODO: streaming version of get_flow_cell_info()
    TODO: streaming version of get_device_info()? If we add device_connected and/or hardware ID?

    Set the calibration measurements to be used by MinKNOW.

    Calibration describes how to convert from the raw ADC (analog-to-digital converter) values
    from the device into picoamps (pA).

    Note that calibration depends on the device, flow cell and some of the device settings
    (including sampling frequency and the capacitance used in the integratation circuit). If
    any of these are changed, the calibration will no longer be used. Instead, a previously-saved
    calibration (for that combination of flow cell and settings) might be used, or the identity
    calibration might be used.

    On a MinION, the settings that a calibration depends on are sampling frequency and
    integration capacitor.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def clear_calibration(self, request, context):
    """Clear the current calibration.

    This is the same as setting the calibration to be the identity function (setting all offsets
    to 0, and all pA ranges to the digitisation value).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_calibration(self, request, context):
    """The calibration measurements being used by MinKNOW.

    Calibration describes how to convert from the raw ADC (analog-to-digital converter) values
    from the device into picoamps (pA).

    To get a pA value from an ADC value the following function is applied::

    pA_current = (adc_current + offset) / (digitisation / pA_range)

    The digitisation is the range of possible ADC values. It is the same for all channels.

    If there is no calibration (including if it was cleared with ``clear_calibration()`` or
    invalidated because of device settings changes), this will return the identity calibration:
    all offsets will be 0, and the pA ranges will be the same as the digitisation.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_temperature(self, request, context):
    """If the device is capable (see GetDeviceInfoResponse.temperature_controllable)
    then this sets the minimum and maximum temperatures of the flow-cell.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_temperature(self, request, context):
    """Get the current temperature of the device.

    Since 1.11
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def unblock(self, request, context):
    """Triggers an unblock for a list of channels for a given duration (Please see UnblockRequest).
    It will start an unblock for every channel received as a parameter, then this RPC returns.
    After the timeout expires (the duration in seconds given in the request), the return from
    unblock is automatically triggered, which resets the channel configuration (mux) to the
    value preceding the unblock. 

    Notes!!

    During the unblock the user should NOT do any mux changes, as the unblock will be interrupted.
    On Promethion this would be even more complicated, as an unblock would normally restore
    hardware saturation. If an unblock is interrupted it will not restore the state to the original
    one.

    The user should NOT change the overload mode during an unblock - this will confuse the return from
    unblock, which tries to reset the overload mode to the state preceeding the unblock.

    The unblock can fail if the channel is not in a valid well state (this means a channel needs to be
    in one of pore1-4, not test current, regen pore or unblock). If a mux is not valid, the unblock grpc
    will try to continue for the rest of the channels, ignoring the one with the wrong mux.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancel_unblocks(self, request, context):
    """Cancel in progress unblocks.

    Any unblocks registered with `device.unblock` will be stopped before this command returns.
    Unblocks are stopped by applying any actions required to return from unblock (mux changes, or hardware configuration).

    Since 1.15
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_channel_configuration(self, request, context):
    """Get the channel configuration for any number of channels

    The maximum addressable channel will depend on the device. Currently this will be 512 on a MinION/GridION
    and 4096 on a PromethION
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_channel_configuration(self, request, context):
    """Set the channel configuration for any number of channels

    The maximum addressable channel will depend on the device. Currently this will be 512 on a MinION/GridION
    and 4096 on a PromethION.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_channel_configuration_all(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_saturation_config(self, request, context):
    """Set the saturation control configuration.

    The request is immediately sent to the data acquisition module, and applied. All settings can be changed
    whilst the experiment is running.

    If any keys are not specified when this method is called (see the message for specific optional parameters),
    the previously applied parameters are kept; initially, when this method has never been called, defaults from the
    application config are used.

    note: calling this method resets anu in-progress saturations when it is called, causing them to need to start
    saturation counts again, this may mean any saturations may take longer to occur.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_saturation_config(self, request, context):
    """Get the saturation control configuration.

    The default configuration is specifed by the MinKNOW application configuration, the command returns the most
    recently applied saturation config.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_sample_rate(self, request, context):
    """Get the sample rate of the device

    Please refer to MinionDeviceService and PromethionDeviceService for the expected
    return value for a minion and promethion respectively
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_sample_rate(self, request, context):
    """Set the sample rate of the device, and returns the actual value set on the device

    Please refer to MinionDeviceService and PromethionDeviceService to see
    how the value set here will be used to determine the real sample rate for a
    minion and promethion respectively

    Trying to set the sample rate during an acquisition period will result in an error
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_bias_voltage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_bias_voltage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DeviceServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_device_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_device_info,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetDeviceInfoRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetDeviceInfoResponse.SerializeToString,
      ),
      'get_device_state': grpc.unary_unary_rpc_method_handler(
          servicer.get_device_state,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetDeviceStateRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetDeviceStateResponse.SerializeToString,
      ),
      'stream_device_state': grpc.unary_stream_rpc_method_handler(
          servicer.stream_device_state,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.StreamDeviceStateRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetDeviceStateResponse.SerializeToString,
      ),
      'get_flow_cell_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_flow_cell_info,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetFlowCellInfoRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetFlowCellInfoResponse.SerializeToString,
      ),
      'stream_flow_cell_info': grpc.unary_stream_rpc_method_handler(
          servicer.stream_flow_cell_info,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.StreamFlowCellInfoRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetFlowCellInfoResponse.SerializeToString,
      ),
      'set_user_specified_flow_cell_id': grpc.unary_unary_rpc_method_handler(
          servicer.set_user_specified_flow_cell_id,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedFlowCellIdRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedFlowCellIdResponse.SerializeToString,
      ),
      'set_user_specified_product_code': grpc.unary_unary_rpc_method_handler(
          servicer.set_user_specified_product_code,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedProductCodeRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetUserSpecifiedProductCodeResponse.SerializeToString,
      ),
      'get_channels_layout': grpc.unary_unary_rpc_method_handler(
          servicer.get_channels_layout,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetChannelsLayoutRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetChannelsLayoutResponse.SerializeToString,
      ),
      'reset_device_settings': grpc.unary_unary_rpc_method_handler(
          servicer.reset_device_settings,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.ResetDeviceSettingsRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.ResetDeviceSettingsResponse.SerializeToString,
      ),
      'set_calibration': grpc.unary_unary_rpc_method_handler(
          servicer.set_calibration,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetCalibrationRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetCalibrationResponse.SerializeToString,
      ),
      'clear_calibration': grpc.unary_unary_rpc_method_handler(
          servicer.clear_calibration,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.ClearCalibrationRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.ClearCalibrationResponse.SerializeToString,
      ),
      'get_calibration': grpc.unary_unary_rpc_method_handler(
          servicer.get_calibration,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetCalibrationRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetCalibrationResponse.SerializeToString,
      ),
      'set_temperature': grpc.unary_unary_rpc_method_handler(
          servicer.set_temperature,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetTemperatureRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetTemperatureResponse.SerializeToString,
      ),
      'get_temperature': grpc.unary_unary_rpc_method_handler(
          servicer.get_temperature,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetTemperatureRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetTemperatureResponse.SerializeToString,
      ),
      'unblock': grpc.unary_unary_rpc_method_handler(
          servicer.unblock,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.UnblockRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.UnblockResponse.SerializeToString,
      ),
      'cancel_unblocks': grpc.unary_unary_rpc_method_handler(
          servicer.cancel_unblocks,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.CancelUnblocksRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.CancelUnblocksResponse.SerializeToString,
      ),
      'get_channel_configuration': grpc.unary_unary_rpc_method_handler(
          servicer.get_channel_configuration,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetChannelConfigurationRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetChannelConfigurationResponse.SerializeToString,
      ),
      'set_channel_configuration': grpc.unary_unary_rpc_method_handler(
          servicer.set_channel_configuration,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationResponse.SerializeToString,
      ),
      'set_channel_configuration_all': grpc.unary_unary_rpc_method_handler(
          servicer.set_channel_configuration_all,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationAllRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetChannelConfigurationAllResponse.SerializeToString,
      ),
      'set_saturation_config': grpc.unary_unary_rpc_method_handler(
          servicer.set_saturation_config,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetSaturationConfigRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetSaturationConfigResponse.SerializeToString,
      ),
      'get_saturation_config': grpc.unary_unary_rpc_method_handler(
          servicer.get_saturation_config,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetSaturationConfigRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetSaturationConfigResponse.SerializeToString,
      ),
      'get_sample_rate': grpc.unary_unary_rpc_method_handler(
          servicer.get_sample_rate,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetSampleRateRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetSampleRateResponse.SerializeToString,
      ),
      'set_sample_rate': grpc.unary_unary_rpc_method_handler(
          servicer.set_sample_rate,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetSampleRateRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetSampleRateResponse.SerializeToString,
      ),
      'get_bias_voltage': grpc.unary_unary_rpc_method_handler(
          servicer.get_bias_voltage,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.GetBiasVoltageRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.GetBiasVoltageResponse.SerializeToString,
      ),
      'set_bias_voltage': grpc.unary_unary_rpc_method_handler(
          servicer.set_bias_voltage,
          request_deserializer=minknow_dot_rpc_dot_device__pb2.SetBiasVoltageRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_device__pb2.SetBiasVoltageResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ont.rpc.device.DeviceService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
