# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from minLights.rpc import statistics_pb2 as minknow_dot_rpc_dot_statistics__pb2


class StatisticsServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stream_duty_time = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_duty_time',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamDutyTimeRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamDutyTimeResponse.FromString,
        )
    self.get_duty_time = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_duty_time',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetDutyTimeRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetDutyTimeResponse.FromString,
        )
    self.stream_throughput = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_throughput',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamCumulativeThroughputRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamCumulativeThroughputResponse.FromString,
        )
    self.get_throughput = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_throughput',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetCumulativeThroughputRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetCumulativeThroughputResponse.FromString,
        )
    self.stream_per_barcode_throughput = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_per_barcode_throughput',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamPerBarcodeCumulativeThroughputRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamPerBarcodeCumulativeThroughputResponse.FromString,
        )
    self.get_per_barcode_throughput = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_per_barcode_throughput',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetPerBarcodeCumulativeThroughputRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetPerBarcodeCumulativeThroughputResponse.FromString,
        )
    self.stream_encountered_barcode_names = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_encountered_barcode_names',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamEncounteredBarcodeNamesRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamEncounteredBarcodeNamesResponse.FromString,
        )
    self.get_encountered_barcode_names = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_encountered_barcode_names',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetEncounteredBarcodeNamesRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetEncounteredBarcodeNamesResponse.FromString,
        )
    self.stream_temperature = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_temperature',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamTemperatureRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamTemperatureResponse.FromString,
        )
    self.get_temperature = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_temperature',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetTemperatureRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetTemperatureResponse.FromString,
        )
    self.stream_bias_voltages = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_bias_voltages',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamBiasVoltagesRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamBiasVoltagesResponse.FromString,
        )
    self.get_bias_voltages = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_bias_voltages',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetBiasVoltagesRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetBiasVoltagesResponse.FromString,
        )
    self.stream_read_length_histogram = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_read_length_histogram',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamReadLengthHistogramRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamReadLengthHistogramResponse.FromString,
        )
    self.get_read_length_histogram = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_read_length_histogram',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthHistogramRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthHistogramResponse.FromString,
        )
    self.get_read_length_types = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_read_length_types',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthTypesRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthTypesResponse.FromString,
        )
    self.stream_pore_speed_in_bases_boxplots = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_pore_speed_in_bases_boxplots',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamBoxplotRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.FromString,
        )
    self.get_pore_speed_in_bases_boxplots = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_pore_speed_in_bases_boxplots',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetBoxplotRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.FromString,
        )
    self.stream_qscore_boxplots = channel.unary_stream(
        '/ont.rpc.statistics.StatisticsService/stream_qscore_boxplots',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamBoxplotRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.FromString,
        )
    self.get_qscore_boxplots = channel.unary_unary(
        '/ont.rpc.statistics.StatisticsService/get_qscore_boxplots',
        request_serializer=minknow_dot_rpc_dot_statistics__pb2.GetBoxplotRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.FromString,
        )


class StatisticsServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def stream_duty_time(self, request, context):
    """Tracks how much time has been spent in each channel state, aggregated across all the channels

    Will fail with FAILED_PRECONDITION if minknow is not acquiring data unless `wait_for_processing` is set to True,
    then it will block and wait for data to start acquiring.

    The first response will give you all the data it can

    Since 1.13
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_duty_time(self, request, context):
    """Gets duty time information for a completed acquisition period.

    Currently, all time values must be given in multiples of 1 minute (it is recommended that the
    time unit is set to minutes).

    Since 1.14
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_throughput(self, request, context):
    """A 2D histogram between basecall length and qscore

    The first response(s) will give you the latest data, then the responses after that will only
    contain buckets that have changed. The initial state may be sent over multiple messages

    Currently unimplemented
    rpc stream_heatmap (StreamHeatmapRequest) returns (stream StreamHeatmapResponse) {}

    Tracks experiment throughput across all channels over time

    The first response will give you all the data it can.

    The stream will end once the current acquisition period ends, and a caller will need to
    reinvoke the rpc in order to get new throughput data.

    Since 1.14
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_throughput(self, request, context):
    """Gets cumultative throughput information for a completed acquisition period.

    Currently, all time values must be given in multiples of 1 minute (it is recommended that the
    time unit is set to minutes).

    Since 1.14
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_per_barcode_throughput(self, request, context):
    """Tracks per-barcode throughput across all channels over time

    The first response will give you all the data it can.

    The stream will end once the current acquisition period ends, and a caller will need to
    reinvoke the rpc in order to get new throughput data.

    Since 3.6
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_per_barcode_throughput(self, request, context):
    """Gets per-barcode cumultative throughput information for a completed acquisition period.

    Currently, all time values must be given in multiples of 1 minute (it is recommended that the
    time unit is set to minutes).

    Since 3.6
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_encountered_barcode_names(self, request, context):
    """Tracks which barcode names have been encountered

    When a new barcode name is encountered, a list of all encountered barcode names is returned

    Since 3.6
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_encountered_barcode_names(self, request, context):
    """Gets the barcode names which were encountered

    Since 3.6
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_temperature(self, request, context):
    """Streams device temperature for a device. The first message will contain all of the temperatures up
    until the current live point, and then messages after that point will just be updates.

    Temperatures are averaged over a 1 minute period, and the value of each bucket is given in minute intervals

    Since 3.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_temperature(self, request, context):
    """Gets the history for device temperature for a particular acquisition period

    Will fail with INVALID_ARGUMENT if an unknown acquisition id is given

    Since 3.1
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_bias_voltages(self, request, context):
    """Streams when bias voltage changes occur, where the response given will be the acquisition
    index that the voltage changed at, and the voltage itself. The first message will contain
    all of the bias voltage changes up until the current live point, and then messages after
    that period will just be updates

    Will fail with INVALID_ARGUMENT if an unknown acquisition id is given

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_bias_voltages(self, request, context):
    """Gets the history of bias volatge changes for a particular acquisition period

    Will fail with INVALID_ARGUMENT if an unknown acquisition id is given

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_read_length_histogram(self, request, context):
    """A histogram of estimated read lengths (based on events)

    A whole new histogram will be sent everytime minknow polls for data (set by `poll_time`) and not just updates

    Since 3.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_read_length_histogram(self, request, context):
    """Gets the estimated read lengths for a particular acquisition period

    Since 3.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_read_length_types(self, request, context):
    """Gets a list of the types of read-length values for which a histogram is available

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_pore_speed_in_bases_boxplots(self, request, context):
    """Returns the speed by bases metric represented as datasets (i.e. boxplots).

    Speed by bases is the pore speed measured in called bases: read length in bases / read length in seconds
    for all the reads that were successfully called.

    A dataset is a collection of quantiles (min, max, q50 etc - please see BoxplotDataset) recorded for
    a fixed period of time, say dt. dt is specified in the configs, and it defaults to 10 min for MinKNOW 3.2.
    When acquisition starts, MinKNOW accumulates these stats for each dt interval. Each dt generates
    a dataset streamed by this rpc. The stream can request aggregated stats by averaging the stats from
    consecutive dt periods.

    Notes:

    Each streamed message will return ALL the datasets (i.e. boxplots) from the start of the experiment.

    When using this rpc, basecalling needs to be enabled.

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_pore_speed_in_bases_boxplots(self, request, context):
    """Get the final representation of the speed by bases for a requested acquisition period.
    The acquisition must have finished at the time of this call, or the grpc will fail.

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_qscore_boxplots(self, request, context):
    """Returns the qscore over time metric represented as datasets (i.e. boxplots).

    This metric applies to all the successfully called reads.

    A dataset is a collection of quantiles (min, max, q50 etc - please see BoxplotDataset) recorded for
    a fixed period of time, say dt. dt is specified in the configs, and it defaults to 10 min for MinKNOW 3.2.
    When acquisition starts, MinKNOW accumulates these stats for each dt interval. Each dt generates
    a dataset streamed by this rpc. The stream can request aggregated stats by averaging the stats from
    consecutive dt periods.

    Notes:

    Each streamed message will return ALL the datasets (i.e. boxplots) from the start of the experiment.

    When using this rpc, basecalling needs to be enabled.

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_qscore_boxplots(self, request, context):
    """Get the final representation of the qscore over time metric for a requested acquisition period.
    The acquisition must have finished at the time of this call, or the grpc will fail.

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StatisticsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stream_duty_time': grpc.unary_stream_rpc_method_handler(
          servicer.stream_duty_time,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamDutyTimeRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamDutyTimeResponse.SerializeToString,
      ),
      'get_duty_time': grpc.unary_unary_rpc_method_handler(
          servicer.get_duty_time,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetDutyTimeRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetDutyTimeResponse.SerializeToString,
      ),
      'stream_throughput': grpc.unary_stream_rpc_method_handler(
          servicer.stream_throughput,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamCumulativeThroughputRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamCumulativeThroughputResponse.SerializeToString,
      ),
      'get_throughput': grpc.unary_unary_rpc_method_handler(
          servicer.get_throughput,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetCumulativeThroughputRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetCumulativeThroughputResponse.SerializeToString,
      ),
      'stream_per_barcode_throughput': grpc.unary_stream_rpc_method_handler(
          servicer.stream_per_barcode_throughput,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamPerBarcodeCumulativeThroughputRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamPerBarcodeCumulativeThroughputResponse.SerializeToString,
      ),
      'get_per_barcode_throughput': grpc.unary_unary_rpc_method_handler(
          servicer.get_per_barcode_throughput,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetPerBarcodeCumulativeThroughputRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetPerBarcodeCumulativeThroughputResponse.SerializeToString,
      ),
      'stream_encountered_barcode_names': grpc.unary_stream_rpc_method_handler(
          servicer.stream_encountered_barcode_names,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamEncounteredBarcodeNamesRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamEncounteredBarcodeNamesResponse.SerializeToString,
      ),
      'get_encountered_barcode_names': grpc.unary_unary_rpc_method_handler(
          servicer.get_encountered_barcode_names,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetEncounteredBarcodeNamesRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetEncounteredBarcodeNamesResponse.SerializeToString,
      ),
      'stream_temperature': grpc.unary_stream_rpc_method_handler(
          servicer.stream_temperature,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamTemperatureRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamTemperatureResponse.SerializeToString,
      ),
      'get_temperature': grpc.unary_unary_rpc_method_handler(
          servicer.get_temperature,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetTemperatureRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetTemperatureResponse.SerializeToString,
      ),
      'stream_bias_voltages': grpc.unary_stream_rpc_method_handler(
          servicer.stream_bias_voltages,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamBiasVoltagesRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamBiasVoltagesResponse.SerializeToString,
      ),
      'get_bias_voltages': grpc.unary_unary_rpc_method_handler(
          servicer.get_bias_voltages,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetBiasVoltagesRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetBiasVoltagesResponse.SerializeToString,
      ),
      'stream_read_length_histogram': grpc.unary_stream_rpc_method_handler(
          servicer.stream_read_length_histogram,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamReadLengthHistogramRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.StreamReadLengthHistogramResponse.SerializeToString,
      ),
      'get_read_length_histogram': grpc.unary_unary_rpc_method_handler(
          servicer.get_read_length_histogram,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthHistogramRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthHistogramResponse.SerializeToString,
      ),
      'get_read_length_types': grpc.unary_unary_rpc_method_handler(
          servicer.get_read_length_types,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthTypesRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.GetReadLengthTypesResponse.SerializeToString,
      ),
      'stream_pore_speed_in_bases_boxplots': grpc.unary_stream_rpc_method_handler(
          servicer.stream_pore_speed_in_bases_boxplots,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamBoxplotRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.SerializeToString,
      ),
      'get_pore_speed_in_bases_boxplots': grpc.unary_unary_rpc_method_handler(
          servicer.get_pore_speed_in_bases_boxplots,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetBoxplotRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.SerializeToString,
      ),
      'stream_qscore_boxplots': grpc.unary_stream_rpc_method_handler(
          servicer.stream_qscore_boxplots,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.StreamBoxplotRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.SerializeToString,
      ),
      'get_qscore_boxplots': grpc.unary_unary_rpc_method_handler(
          servicer.get_qscore_boxplots,
          request_deserializer=minknow_dot_rpc_dot_statistics__pb2.GetBoxplotRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_statistics__pb2.BoxplotResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ont.rpc.statistics.StatisticsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
