### THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY ###
from .analysis_configuration_pb2_grpc import *
from . import analysis_configuration_pb2
from minLights.rpc.analysis_configuration_pb2 import *
from minLights.rpc._support import MessageWrapper, ArgumentError
import time
import logging

__all__ = [
    "AnalysisConfigurationService",
    "EventDetection",
    "ReadDetectionParams",
    "ReadClassificationParams",
    "HistogramDocument",
    "ChannelStates",
    "GetAnalysisConfigurationRequest",
    "AnalysisConfiguration",
    "SetAnalysisConfigurationResponse",
    "ResetAnalysisConfigurationRequest",
    "ResetAnalysisConfigurationResponse",
    "SetAnalysisEnabledStateRequest",
    "SetAnalysisEnabledStateResponse",
    "GetChannelStatesDescRequest",
    "GetChannelStatesDescResponse",
    "GetSummaryRequest",
    "GetSummaryResponse",
    "BarcodingConfiguration",
    "BasecallerConfiguration",
    "SetBasecallerConfigurationRequest",
    "SetBasecallerConfigurationResponse",
    "GetBasecallerConfigurationRequest",
    "GetPoreTypeConfigurationRequest",
    "PoreTypeConfiguration",
    "SetPoreTypeConfigurationResponse",
    "WriterConfiguration",
    "SetWriterConfigurationResponse",
    "GetWriterConfigurationRequest",
]

class AnalysisConfigurationService(object):
    def __init__(self, channel):
        self._stub = AnalysisConfigurationServiceStub(channel)
        self._pb = analysis_configuration_pb2

    def get_analysis_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Get the analysis configuration

        :rtype: AnalysisConfiguration
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_analysis_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_analysis_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetAnalysisConfigurationRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_analysis_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_analysis_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_analysis_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def set_analysis_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Sets the analysis configuration

        This sets the whole configuration as-is, so you have to specify the whole analysis configuration as any fields
        there previously will be overwritten. To preserve the current analysis configuration, use a get-modify-set
        approach. Use get_analysis_configuration to retrieve the current config and modify the fields on that copy.
        Then use this call to set the modified version.

        The AnalysisConfiguration message is converted to/from json in Minknow, but this will be removed from later
        versions of MinKNOW. The basecaller params are the first ones to move away from the jsn format. The old structure
        has been kept for backwards compatibility, but it will be removed.

        The AnalysisConfiguration message is intended to be used to convert easily from protobuf to json and back again.
        To convert from json to a protobuf message (assuming 'analysis_conf_json' holds the json data:

        >>> import minknow
        >>> from google.protobuf import json_format
        >>>
        >>> analysis_conf_pb = minLights.rpc.analysis_configuration_service.AnalysisConfiguration()
        >>> json_format.Parse(json.dumps(analysis_conf_json), analysis_conf_pb)

        To convert from a protobuf message to json:

        >>> json_data = json_format.MessageToJson(analysis_conf_resp, preserving_proto_field_name=True, including_default_value_fields=True)

        'preserving_proto_field_name' is needed because json_format will try convert keys to json-standard(?) format, like converting
        my_key to myKey, and the key names as seen in the protobuf file are important to minknow

        'including_default_value_fields' is needed because in proto3, primitive values that are default initialised (like a uint32 with value 0)
        will not be sent on the wire, so the value wouldn't appear when converting to json. In practice, most values are wrapper types and this
        field won't have an affect in wrapper types, but it does affect enum types as the default initailised value is the 0th enum.

        NOTE: if the analysis configuration was set using the new parameters (with the filename for albacore config files), the old parameters
        from jsn will be ignored. So set_analysis_configuration must be used with either the old protobuf message for the basecaller parameters,
        or with the new one, but it cannot be used interleaved!

        :param event_detection:
        :param read_detection:
        :param read_detection_alt:
            Deprecated - unused internally.
        :param read_classification:
        :param histograms:
        :param channel_states:
        :rtype: SetAnalysisConfigurationResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.set_analysis_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_analysis_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = AnalysisConfiguration()

        if 'event_detection' in kwargs:
            unused_args.remove('event_detection')
            _message.event_detection.CopyFrom(kwargs['event_detection'])

        if 'read_detection' in kwargs:
            unused_args.remove('read_detection')
            _message.read_detection.CopyFrom(kwargs['read_detection'])

        if 'read_detection_alt' in kwargs:
            unused_args.remove('read_detection_alt')
            _message.read_detection_alt.CopyFrom(kwargs['read_detection_alt'])

        if 'read_classification' in kwargs:
            unused_args.remove('read_classification')
            _message.read_classification.CopyFrom(kwargs['read_classification'])

        if 'histograms' in kwargs:
            unused_args.remove('histograms')
            for key, value in kwargs['histograms'].items():
                _message.histograms[key].CopyFrom(value)

        if 'channel_states' in kwargs:
            unused_args.remove('channel_states')
            for key, value in kwargs['channel_states'].items():
                _message.channel_states[key].CopyFrom(value)

        if len(unused_args) > 0:
            raise ArgumentError("set_analysis_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.set_analysis_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_analysis_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def reset_analysis_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Reset the analysis configuration

        The configuration will be set to the initial default configuration that was set on boot

        Since 3.0

        :rtype: ResetAnalysisConfigurationResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.reset_analysis_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.reset_analysis_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = ResetAnalysisConfigurationRequest()

        if len(unused_args) > 0:
            raise ArgumentError("reset_analysis_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.reset_analysis_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.reset_analysis_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def set_analysis_enabled_state(self, _message=None, _timeout=None, **kwargs):
        """
        Enable or disable analysis entirely.

        :param enable: (required)
        :rtype: SetAnalysisEnabledStateResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.set_analysis_enabled_state(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_analysis_enabled_state. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = SetAnalysisEnabledStateRequest()

        if 'enable' in kwargs:
            unused_args.remove('enable')
            _message.enable = kwargs['enable']
        else:
            raise ArgumentError("set_analysis_enabled_state requires a 'enable' argument")

        if len(unused_args) > 0:
            raise ArgumentError("set_analysis_enabled_state got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.set_analysis_enabled_state(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_analysis_enabled_state. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_channel_states_desc(self, _message=None, _timeout=None, **kwargs):
        """
        Get a description of the possible channel states.

        This is a subset of the information included in the channel states section of the analysis
        configuration. It will change when the analysis configuration changes.

        :rtype: GetChannelStatesDescResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_channel_states_desc(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_channel_states_desc. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetChannelStatesDescRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_channel_states_desc got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_channel_states_desc(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_channel_states_desc. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_summary(self, _message=None, _timeout=None, **kwargs):
        """
        Get a brief summary of the analysis configuration.

        This is a high-level overview of what major parts of the analysis pipeline are enabled.

        :rtype: GetSummaryResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_summary(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_summary. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetSummaryRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_summary got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_summary(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_summary. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def set_basecaller_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Configure the basecaller which will run during acquisition.

        This rpc will result in an error if invoked during acquisition.

        By default no basecalling is performed (enable = false).

        Since 3.0

        :param enable:
            Choose if guppy is enabled or disabled.

            If set to false then no basecalling will take place, and the rest of the config is ignored.
        :param config_filename:
            The Guppy cfg file with all the settings.

            Filename can be absolute, or a basename (eg dna_r9.4_450bps.cfg)
            which guppy should locate (see guppy application config entry: "data_path")
        :param read_filtering:
            Control how read filtering is applied to output of basecaller.

            If no filtering parameters are provided then reads will not
            be filtered.
        :param barcoding_configuration:
            Control the barcoding configuration.
            If no barcoding configuration is supplied, barcoding is disabled.

            Since 3.5
        :rtype: SetBasecallerConfigurationResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.set_basecaller_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_basecaller_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = SetBasecallerConfigurationRequest()

        if 'enable' in kwargs:
            unused_args.remove('enable')
            _message.configs.enable = kwargs['enable']

        if 'config_filename' in kwargs:
            unused_args.remove('config_filename')
            _message.configs.config_filename = kwargs['config_filename']

        if 'read_filtering' in kwargs:
            unused_args.remove('read_filtering')
            _message.configs.read_filtering.CopyFrom(kwargs['read_filtering'])

        if 'barcoding_configuration' in kwargs:
            unused_args.remove('barcoding_configuration')
            _message.configs.barcoding_configuration.CopyFrom(kwargs['barcoding_configuration'])

        if len(unused_args) > 0:
            raise ArgumentError("set_basecaller_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.set_basecaller_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_basecaller_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_basecaller_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Find the current basecaller configuration (see #set_basecaller_configuration)

        Since 3.0

        :rtype: BasecallerConfiguration
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_basecaller_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_basecaller_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetBasecallerConfigurationRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_basecaller_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_basecaller_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_basecaller_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_pore_type_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Get the pore type configuration

        Since 3.2

        :rtype: PoreTypeConfiguration
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_pore_type_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_pore_type_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetPoreTypeConfigurationRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_pore_type_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_pore_type_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_pore_type_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def set_pore_type_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Set the pore type configuration

        By default, the configuration for all wells is "not_set"
        (global_pore_type set to "not_set")

        This rpc will result in an error if invoked during acquisition.

        If an invalid PoreTypeConfiguration is supplied, an error will be returned
        Invalid PoreTypeConfiguration include those where:

         - No pore_type_config is set
         - A pore type is set to an empty string
         - A pore type is set to "invalid"

        If an error is returned, the pore type configuration is not updated.

        Since 3.2

        :param global_pore_type:
        :rtype: SetPoreTypeConfigurationResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.set_pore_type_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_pore_type_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = PoreTypeConfiguration()

        if 'global_pore_type' in kwargs:
            unused_args.remove('global_pore_type')
            _message.global_pore_type = kwargs['global_pore_type']

        if len(unused_args) > 0:
            raise ArgumentError("set_pore_type_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.set_pore_type_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_pore_type_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def set_writer_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Set the writer configuration.

        Note: Calling this method overrides any previous settings stored for the writers.
        In order to preserve settings, you should call #get_writer_configuration, mutate
        the config, then call this method.

        Will fail with FAILED_PRECONDITION if acquisition is running.

        The default writer config is to write nothing to disk.

        Since 3.3

        :param read_fast5:
            Configuration for the fast5 writer.

            If not specified, no multi fast5 outputs are generated.
        :param read_old_single_fast5:
            Configuration for the old (single) fast5 writer.

            If not specified, no fast5 outputs are generated.
        :param read_fastq:
            Configuration for the fastq writer.

            If not specified, no fastq outputs are generated.
        :param read_protobuf:
            Configuration for the protobuf writer.

            If not specified, no protobuf outputs are generated.
        :param sequencing_summary:
            Configuration for Sequencing Summary file

            If not specified, no summary file is generated.
        :param bulk:
            Configuration for the bulk writer.

            If not specified, a basic bulk output is generated.
        :param report:
            Configuration for the report writer

            If acquisition.StartRequest.generate_report is set for the
            acquisition period, and empty paths (or no report config) are supplied
            for reports default paths are used.
        :rtype: SetWriterConfigurationResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.set_writer_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_writer_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = WriterConfiguration()

        if 'read_fast5' in kwargs:
            unused_args.remove('read_fast5')
            _message.read_fast5.CopyFrom(kwargs['read_fast5'])

        if 'read_old_single_fast5' in kwargs:
            unused_args.remove('read_old_single_fast5')
            _message.read_old_single_fast5.CopyFrom(kwargs['read_old_single_fast5'])

        if 'read_fastq' in kwargs:
            unused_args.remove('read_fastq')
            _message.read_fastq.CopyFrom(kwargs['read_fastq'])

        if 'read_protobuf' in kwargs:
            unused_args.remove('read_protobuf')
            _message.read_protobuf.CopyFrom(kwargs['read_protobuf'])

        if 'sequencing_summary' in kwargs:
            unused_args.remove('sequencing_summary')
            _message.sequencing_summary.CopyFrom(kwargs['sequencing_summary'])

        if 'bulk' in kwargs:
            unused_args.remove('bulk')
            _message.bulk.CopyFrom(kwargs['bulk'])

        if 'report' in kwargs:
            unused_args.remove('report')
            _message.report.CopyFrom(kwargs['report'])

        if len(unused_args) > 0:
            raise ArgumentError("set_writer_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.set_writer_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.set_writer_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_writer_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Get the currently active writer configuration.

        Since 3.3

        :rtype: WriterConfiguration
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_writer_configuration(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_writer_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetWriterConfigurationRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_writer_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_writer_configuration(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.analysis_configuration.AnalysisConfigurationService.get_writer_configuration. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error


