### THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY ###
from .promethion_device_pb2_grpc import *
from . import promethion_device_pb2
from minLights.rpc.promethion_device_pb2 import *
from minLights.rpc._support import MessageWrapper, ArgumentError
import time
import logging

__all__ = [
    "PromethionDeviceService",
    "WaveformSettings",
    "DeviceSettings",
    "TimingEnginePeriods",
    "PixelBlockSettings",
    "PixelSettings",
    "ChangeDeviceSettingsRequest",
    "ChangeDeviceSettingsResponse",
    "GetDeviceSettingsRequest",
    "GetDeviceSettingsResponse",
    "ChangePixelBlockSettingsRequest",
    "ChangePixelBlockSettingsResponse",
    "GetPixelBlockSettingsRequest",
    "GetPixelBlockSettingsResponse",
    "ChangePixelSettingsRequest",
    "ChangePixelSettingsResponse",
    "GetPixelSettingsRequest",
    "GetPixelSettingsResponse",
]

class PromethionDeviceService(object):
    def __init__(self, channel):
        self._stub = PromethionDeviceServiceStub(channel)
        self._pb = promethion_device_pb2

    def change_device_settings(self, _message=None, _timeout=None, **kwargs):
        """
        Change the settings which apply to the whole device.

        :param sampling_frequency:
            The number of measurements to take each second.

            Possible values are multiples of 1000, between 1000, and 10000.
            If the specified value is not possible in the hardware, the closest
            frequency is used.
            For example, if 1499 is specified, 1000 is used, if 2500 is
            specified, 3000 is used.

            This value cannot be changed during acquisition.
        :param ramp_voltage:
            The value to apply as the ramp voltage (in millivolts)

            Valid values are in the range -1250mv..1250mv 
        :param bias_voltage:
            The value to apply as the bias voltage (in millivolts)

            Valid values are in the range -1250mv..1250mv 
        :param bias_voltage_waveform:
            The waveform settings
        :param saturation_control_enabled:
            Enables saturation control on the device
        :param fast_calibration_enabled:
            Enable use of the fast calibration mode across the device
        :param temperature_target:
            If the device is capable (see device.get_device_info().temperature_controllable)
            then this sets the minimum and maximum temperatures of the flow-cell.

            These values must be between the limits specified in the application config,
            see: min_user_setpoint_temperature_celsius and max_user_setpoint_temperature_celsius
        :param timings:
            If specified, the device will adopt these timings to set how
            long is spent at various stages of the current digitisation processes.
            The message includes a way of returning to default timings.

            This value cannot be changed during acquisition
        :rtype: ChangeDeviceSettingsResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.change_device_settings(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.change_device_settings. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = ChangeDeviceSettingsRequest()

        if 'sampling_frequency' in kwargs:
            unused_args.remove('sampling_frequency')
            _message.settings.sampling_frequency.value = kwargs['sampling_frequency']

        if 'ramp_voltage' in kwargs:
            unused_args.remove('ramp_voltage')
            _message.settings.ramp_voltage.value = kwargs['ramp_voltage']

        if 'bias_voltage' in kwargs:
            unused_args.remove('bias_voltage')
            _message.settings.bias_voltage = kwargs['bias_voltage']

        if 'bias_voltage_waveform' in kwargs:
            unused_args.remove('bias_voltage_waveform')
            _message.settings.bias_voltage_waveform.CopyFrom(kwargs['bias_voltage_waveform'])

        if 'saturation_control_enabled' in kwargs:
            unused_args.remove('saturation_control_enabled')
            _message.settings.saturation_control_enabled.value = kwargs['saturation_control_enabled']

        if 'fast_calibration_enabled' in kwargs:
            unused_args.remove('fast_calibration_enabled')
            _message.settings.fast_calibration_enabled.value = kwargs['fast_calibration_enabled']

        if 'temperature_target' in kwargs:
            unused_args.remove('temperature_target')
            _message.settings.temperature_target.value = kwargs['temperature_target']

        if 'timings' in kwargs:
            unused_args.remove('timings')
            _message.settings.timings.CopyFrom(kwargs['timings'])

        if len(unused_args) > 0:
            raise ArgumentError("change_device_settings got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.change_device_settings(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.change_device_settings. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_device_settings(self, _message=None, _timeout=None, **kwargs):
        """
        Get the current settings which apply to the whole device.

        :rtype: GetDeviceSettingsResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_device_settings(_message, timeout=_timeout), unwraps=["settings"])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.get_device_settings. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetDeviceSettingsRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_device_settings got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_device_settings(_message, timeout=_timeout), unwraps=["settings"])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.get_device_settings. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def change_pixel_block_settings(self, _message=None, _timeout=None, **kwargs):
        """
        Change the settings which apply specific pixel blocks.

        :param pixel_blocks:
            1 based map of different pixel blocks settings, a sparse map
            is accepted, keys should be integers between 1 and 12.
        :param pixel_block_default:
            If supplied, contains settings applied to every block before then
            applying any specific settings in the per block settings.
        :rtype: ChangePixelBlockSettingsResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.change_pixel_block_settings(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.change_pixel_block_settings. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = ChangePixelBlockSettingsRequest()

        if 'pixel_blocks' in kwargs:
            unused_args.remove('pixel_blocks')
            for key, value in kwargs['pixel_blocks'].items():
                _message.pixel_blocks[key].CopyFrom(value)

        if 'pixel_block_default' in kwargs:
            unused_args.remove('pixel_block_default')
            _message.pixel_block_default.CopyFrom(kwargs['pixel_block_default'])

        if len(unused_args) > 0:
            raise ArgumentError("change_pixel_block_settings got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.change_pixel_block_settings(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.change_pixel_block_settings. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_pixel_block_settings(self, _message=None, _timeout=None, **kwargs):
        """
        Get the settings which apply to specific pixel blocks.

        :rtype: GetPixelBlockSettingsResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_pixel_block_settings(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.get_pixel_block_settings. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetPixelBlockSettingsRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_pixel_block_settings got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_pixel_block_settings(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.get_pixel_block_settings. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def change_pixel_settings(self, _message=None, _timeout=None, **kwargs):
        """
        Change the settings which apply to the referenced pixels.

        :param pixels:
            1 based map of up to 3000 different pixel settings
        :param pixel_default:
            If supplied, contains settings applied to every pixel before then
            applying any specific settings in the per pixel settings.
        :rtype: ChangePixelSettingsResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.change_pixel_settings(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.change_pixel_settings. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = ChangePixelSettingsRequest()

        if 'pixels' in kwargs:
            unused_args.remove('pixels')
            for key, value in kwargs['pixels'].items():
                _message.pixels[key].CopyFrom(value)

        if 'pixel_default' in kwargs:
            unused_args.remove('pixel_default')
            _message.pixel_default.CopyFrom(kwargs['pixel_default'])

        if len(unused_args) > 0:
            raise ArgumentError("change_pixel_settings got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.change_pixel_settings(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.change_pixel_settings. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error

    def get_pixel_settings(self, _message=None, _timeout=None, **kwargs):
        """
        Get the pixel settings for the requested pixel's

        :param pixels: (required)
            The channels (one based) to return data for.
            A sparse map is accepted
        :rtype: GetPixelSettingsResponse
        """
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            retry_count = 20
            error = None
            for i in range(retry_count):
                try:
                    result = MessageWrapper(self._stub.get_pixel_settings(_message, timeout=_timeout), unwraps=[])
                    return result
                except grpc.RpcError as e:
                    # Retrying unidentified grpc errors to keep clients from crashing
                    if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                    (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                        logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.get_pixel_settings. Attempt {}.'.format(e.code(), e.details(), i))
                    else:
                        raise
                    error = e
                time.sleep(1)
            raise error

        unused_args = set(kwargs.keys())

        _message = GetPixelSettingsRequest()

        if 'pixels' in kwargs:
            unused_args.remove('pixels')
            _message.pixels.extend(kwargs['pixels'])
        else:
            raise ArgumentError("get_pixel_settings requires a 'pixels' argument")

        if len(unused_args) > 0:
            raise ArgumentError("get_pixel_settings got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        retry_count = 20
        error = None
        for i in range(retry_count):
            try:
                result = MessageWrapper(self._stub.get_pixel_settings(_message, timeout=_timeout), unwraps=[])
                return result
            except grpc.RpcError as e:
                # Retrying unidentified grpc errors to keep clients from crashing
                if (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details()) or\
                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()):
                    logging.info('Bypassed ({}: {}) error for grpc: ont.rpc.promethion_device.PromethionDeviceService.get_pixel_settings. Attempt {}.'.format(e.code(), e.details(), i))
                else:
                    raise
                error = e
            time.sleep(1)
        raise error


